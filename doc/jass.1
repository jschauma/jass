.\"	Copyright (c) 2013 Twitter, Inc.
.\"	Originally written by Jan Schaumann <jschauma@netmeister.org> in
.\"	April 2013.
.\"
.Dd April 22, 2013
.Dt JASS 1
.Os
.Sh NAME
.Nm jass
.Nd just another secret sharer
.Sh SYNOPSIS
.Nm
.Op Fl dehv
.Op Fl f Ar file
.Op Fl k Ar key
.Op Fl u Ar user
.Sh DESCRIPTION
The
.Nm
tool allows you to share a secret with other people through the use of SSH
keypairs.
It accepts input on stdin and generates ciphertext on stdout, encrypted
for the given key or user.
.Sh OPTIONS
The following options are supported by
.Nm :
.Bl -tag -width _u_user_
.It Fl e
Perform encryption.
This is the default.
.It Fl d
Perform decryption.
.It Fl f Ar file
Encrypt/decrypt this file.
If not specified,
.Nm
will read data from stdin.
.It Fl h
Print a short help message and exit.
.It Fl k Ar key
Encrypt the input using the given key file, expected to contain a single public
SSH key.
.It Fl u Ar user
Encrypt the input for this user, attempting to find suitable public SSH
keys on the local system or from LDAP.
.It Fl v
Be verbose.
Can be specified multiple times.
.El
.Sh DETAILS
It is not uncommon for people within a given organization to have a need
to share secrets with one another.
.Nm
lets you do this through the use of SSH keys, as those are frequently
already well distributed and trusted in many places.
.Pp
In particular,
.Nm
will convert the given public key into PKCS8 format, allowing it to be
used with
.Xr openssl 1 Ns 's
.Xr rsautl 1
utility.
Since asymmetric encryption is only suitable for inputs smaller than the
keysize,
.Nm
will then generate a 256 bit session key.
This session key is encrypted using the user's public key, while the data
itself is encrypted using AES-256-CBC mode with said session key.
.Pp
As an alternative to providing a public key, a recipient may also be
specified via the
.Fl u
flag.
In that case,
.Nm
will first look for that user's ~/.ssh/authorized_keys file, then the file
/etc/ssh/authorized_keys/<user>, and finally, if neither of these is
readable, it will look for the field specified by the LDAPFIELD variable
for the given username in LDAP.
.Pp
The output from
.Nm
consists of several
.Xr uuencode 1 Ns ed
files.
The first is the encrypted message, the following files are the session
key encrypted for each of the public keys.
.Nm
will properly extract, decode and use these when the
.Fl d
flag is specified, though it should be noted that the decrypted session
key briefly lives on the disk in a temporary directory.
.Sh EXAMPLES
To generate a secret message encrypted with the file 'bobs_pubkey' and
store it in the file 'secret':
.Bd -literal -offset indent
echo "The ostrich has left the savannah." | \\
        jass -e -k bobs_pubkey > secret
.Ed
.Pp
To send a secret message to 'jschauma':
.Bd -literal -offset indent
echo "The lion sleeps." | jass -u jschauma |  \\
        mail -s "Nothing to see here" jschauma
.Ed
.Pp
To decrypt a secret message generated by
.Nm
using the private ssh key found in 'my_privkey':
.Bd -literal -offset indent
jass -d -k my_privkey < secret
.Ed
.Pp
To encrypt the file service.yml for the user 'jschauma':
.Bd -literal -offset indent
jass -u jschauma -f service.yml >service.yml.enc
.Ed
.Pp
This command differs from the previous examples in that the name of the
input file is encoded in the output, allowing the recipient to restore the
file directly:
.Bd -literal -offset indent
$ jass -d -k ~/.ssh/id_rsa -f service.yml.enc
Enter pass phrase for /home/jschauma/.ssh/id_rsa:
$ ls
service.yml
$
.Ed
.Pp
To encrypt data for multiple recipients (as well as for all keys found for
each recipient):
.Bd -literal -offset Ä«ndent
jass -u user1 -u user2 -u user3 <data
.Ed
.Sh ENVIRONMENT
When attempting to query LDAP for public keys,
.Nm
will require the variables LDAFIELD and LDAPSEARCH to be set.
You can either edit the script and set them in there, or export them in
your environment.
.Pp
The following are example values.
.Bl -tag -width LDAPSEARCH_
.It LDAPFIELD
SSHPubkey
.It LDAPSEARCH
ldapsearch -LLLxh ldap.yourdomain.com -b dc=example,dc=com
.El
.Sh SEE ALSO
.Xr openssl 1 ,
.Xr ssh-keygen 1
.Sh BUGS
.Nm
will only allow RSA keys.
.Pp
.Nm
assumes the public SSH key to be in OpenSSH's default format; if the
public key is in another format, it may break.
.Pp
.Nm
will not accept private SSH keys in PEM format when decrypting.
.Pp
When encrypting, you cannot combine specific files given via the
.Fl k
flag with recipients specified via the
.Fl u
flag, even though you can use a single file containing multiple keys or
specify multiple recipients.
.Sh HISTORY
.Nm
was originally written by
.An Jan Schaumann
.Aq jschauma@netmeister.org
in April 2013.
