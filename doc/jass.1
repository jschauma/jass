.\"	Copyright (c) 2013 Twitter, Inc.
.\"	Originally written by Jan Schaumann <jschauma@twitter.com> in
.\"	April 2013.
.\"
.Dd May 05, 2022
.Dt JASS 1
.Os
.Sh NAME
.Nm jass
.Nd just another secret sharer
.Sh SYNOPSIS
.Nm
.Op Fl Vdehlv
.Op Fl c Ar cmd
.Op Fl f Ar file
.Op Fl g Ar group
.Op Fl k Ar key
.Op Fl p Ar passin
.Op Fl u Ar user
.Sh DESCRIPTION
The
.Nm
tool allows you to share a secret with other people through the use of SSH
keypairs.
It accepts input on stdin and generates ciphertext on stdout, encrypted
for the given key or user.
.Sh OPTIONS
The following options are supported by
.Nm :
.Bl -tag -width _p_passin_
.It Fl V
Print version number and exit.
.It Fl c Ar cmd
Use this command to retrieve the public key.
See
.Xr "FINDING PUBKEYS"
for details.
.It Fl d
Perform decryption.
.It Fl e
Perform encryption.
This is the default.
.It Fl f Ar file
Encrypt/decrypt this file.
If not specified,
.Nm
will read data from stdin.
.It Fl g Ar group
Encrypt for all members of this group.
.It Fl h
Print a short help message and exit.
.It Fl k Ar key
Encrypt or decrypt the input using the key(s) found in
.Ar key .
.It Fl l
List recipients of the encrypted input.
.It Fl p Ar passin
Specify the method to retrieve the passphrase for the private key.
See
.Xr "PASS PHRASE ARGUMENTS"
for details.
Defaults to interactively prompt on the controlling tty.
.It Fl u Ar user
Encrypt the input for this user, attempting to find suitable public SSH
keys on the local system or from LDAP or the enabled URLs.
.It Fl v
Be verbose.
Can be specified multiple times.
.El
.Sh DETAILS
It is not uncommon for people within a given organization to have a need
to share secrets with one another.
.Nm
lets you do this through the use of SSH RSA keys, as those are frequently
already well distributed and trusted.
.Pp
Since asymmetric encryption is only suitable for inputs smaller than the
keysize,
.Nm
will extract the public RSA key from an SSH formatted key,
generate a 256 bit session key, and then encrypt the session key using the
public RSA key.
The data itself is encrypted using AES-256-CBC mode with said session key.
.Pp
.Nm
will attempt to encrypt the data for each of the public keys found;
the output from
.Nm
consists of several
.Xr uuencode 1 Ns ed
files.
The first is the encrypted message, followed by a SHA-256 HMAC.
The following files are the session key encrypted for
each of the public keys, followed by version
information.
.Nm
will properly extract, decode and use the suitable
session key when the
.Fl d
flag is specified.
.Pp
When decrypting, if no key is specified via the
.Fl k
flag, then
.Nm
will try ~/.ssh/id_rsa.
.Pp
If the message has been tampered with and does not
match the HMAC, then
.Nm
will abort prior to decryption of the input.
.Pp
Since earlier versions of
.Nm
did not support the use of an HMAC, it is possible
that input generated by an older version of
.Nm
is missing the HMAC.
In that case,
.Nm
will print a warning and exit.
If the user wants to proceed and decrypt the data
without the use of an HMAC, then they may set the
.Ar JASS_NO_HMAC
environment variable.
.Sh FINDING PUBKEYS
.Nm
has several ways of finding the public key of the
recipient(s) when encrypting data.
If no public key file is provided via the
.Fl k
flag, then a recipient may also be specified via the
.Fl g
and
.Fl u
flags.
If
.Fl g
was specified,
.Nm
will expand the given group to individual users.
This expansion will include local and LDAP groups (if
LDAP is enabled) as well as GitHub teams (see Section
GITHUB SERVICE).
.Pp
For each user,
.Nm
will first look for that user's ~/.ssh/authorized_keys file, then the file
/etc/ssh/authorized_keys/<user>.
.Pp
If neither of these is readable, and LDAP is configured by setting the
.Ar LDAPSEARCH
environment variable, then it will look for the field designated by the
.Ar LDAPFIELD
environment variable for the given username in LDAP.
.Pp
Alternatively,
.Nm
may look on a GitHub service (either public GitHub, or
an internal GitHub instance) for the public
key associated with the user.
.Pp
Lastly, the user can also specify a separate command
to retrieve the public key of a user via the
.Fl c
flag.
The given command is executed passing a single
recipient name (i.e., a username) and should return a
public ssh keys in OpenSSH's default format, one per line.
.Sh PASS PHRASE ARGUMENTS
.Nm
allows you to specify the passphrase for your private key via one of the
following methods.
Please note that doing so carries certain risks, and you should carefully
evaluate what may be the best option for you.
.Bl -tag -width pass_password_
.It \fBpass:password\fR
The actual password is \fBpassword\fR.
Since the password is visible to utilities such as
.Xr ps 1
this form should only be used where security is not important.
.It \fBenv:var\fR
Obtain the password from the environment variable \fBvar\fR.
Since the environment of other processes may be visible via e.g.
.Xr ps 1 ,
this option should be used with caution.
.It \fBfile:pathname\fR
The first line of \fBpathname\fR is the password.
\fBpathname\fR need not refer to a regular file: it could for example
refer to a device or named pipe.
Note that standard Unix file access controls should be used to protect
this file.
.El
.Sh GITHUB SERVICE
.Nm
can look for public SSH keys on a GitHub service.
The URL to use for this can be set via the GITHUB_URL
environment variable.
.Pp
If this variable is set,
.Nm
will retrieve keys for users from GitHub as well as
expand groups specified via
.Fl g
as GitHub teams in the format "org/team" or
"numeric-team-id".
.Pp
If you use an internal GitHub instance that requires
authentication, then
.Nm
can make use of the
.Ar GITHUB_API_TOKEN
environment variable.
If set,
.Nm
will use it to set the Basic HTTP Authentication
header 'Authorization' using the current user's
username.
.Pp
When parsing GitHub data,
.Nm
will assume that the result will be JSON data in the
format of:
.Bd -literal -offset -indent
[
 {
   "id": 12345,
   "key": "ssh-rsa AAAAB3NzaC1...",
 },
 ...
]
.Ed
.Sh EXAMPLES
To generate a secret message encrypted with the file 'bobs_pubkey' and
store it in the file 'secret':
.Bd -literal -offset indent
echo "The ostrich has left the savannah." | \\
        jass -e -k bobs_pubkey > secret
.Ed
.Pp
To send a secret message to 'jschauma':
.Bd -literal -offset indent
echo "The lion sleeps." | jass -u jschauma |  \\
        mail -s "Nothing to see here" jschauma
.Ed
.Pp
To decrypt a secret message generated by
.Nm
using the private ssh key found in 'my_privkey':
.Bd -literal -offset indent
jass -d -k my_privkey < secret
.Ed
.Pp
To encrypt the file service.yml for the user 'jschauma':
.Bd -literal -offset indent
jass -u jschauma -f service.yml >service.yml.enc
.Ed
.Pp
To encrypt data for multiple recipients:
.Bd -literal -offset indent
jass -u user1 -u user2 -u user3 <data
.Ed
.Pp
To encrypt data using the internal GitHub instance
with Basic HTTP Auth:
.Bd -literal -offset indent
export GITHUB_URL="https://git.example.com/api/v3"
export GITHUB_API_TOKEN="abcdef0123456789abcdef0123456789abcdef01"
jass -u user1 <data
.Ed
.Pp
If you have a simple SSH Pubkey Store that returns a
list of public keys for a user via a simple HTTP GET
request, you could create a helper script and then use
the
.Fl c
flag as follows:
.Bd -literal -offset indent
cat >fetchkeys <<EOF
#! /bin/sh
curl -s https://internal.example.com/pubkeys/$1
EOF
chmod a+rx fetchkeys
jass -u user1 -c ./fetchkeys <data
.Ed
.Ed
.Sh ENVIRONMENT
When attempting to query LDAP for public keys,
.Nm
will require the variables LDAPFIELD and LDAPSEARCH to be set.
You can either edit the script and set them in there, or export them in
your environment.
.Pp
The following are example values.
.Bl -tag -width GITHUB_API_TOKEN_
.It GITHUB_URL
https://api.github.com/
.It GITHUB_API_TOKEN
abcdef0123456789abcdef0123456789abcdef01
.It JASS_NO_HMAC
feeling_lucky
.It LDAPFIELD
SSHPubkey
.It LDAPSEARCH
ldapsearch -LLLxh ldap.yourdomain.com -b dc=example,dc=com
.El
.Pp
In order to retrieve public SSH keys from your
internal GitHub instance, you could invoke
.Nm
as follows:
.Bd -literal -offset indent
$ export GITHUB_URL="https://git.your.internal.site/api/v3"
$ jass -u jdoe <data
.Ed
.Sh SEE ALSO
.Xr enc 1 ,
.Xr openssl 1 ,
.Xr rsautl 1 ,
.Xr ssh-keygen 1
.Sh BUGS
.Nm
will only allow RSA keys.
.Sh HISTORY
.Nm
was originally written by
.An Jan Schaumann
.Aq jschauma@netmeister.org
in April 2013.
