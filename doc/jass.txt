JASS(1)			NetBSD General Commands Manual		       JASS(1)

NAME
     jass -- just another secret sharer

SYNOPSIS
     jass [-dehv] [-f file] [-k key] [-u user]

DESCRIPTION
     The jass tool allows you to share a secret with other people through the
     use of SSH keypairs.  It accepts input on stdin and generates ciphertext
     on stdout, encrypted for the given key or user.

OPTIONS
     The following options are supported by jass:

     -e	       Perform encryption.  This is the default.

     -d	       Perform decryption.

     -f file   Encrypt/decrypt this file.  If not specified, jass will read
	       data from stdin.

     -h	       Print a short help message and exit.

     -k key    Encrypt the input using the given key file, expected to contain
	       a single public SSH key.

     -u user   Encrypt the input for this user, attempting to find suitable
	       public SSH keys on the local system or from LDAP.

     -v	       Be verbose.  Can be specified multiple times.

DETAILS
     It is not uncommon for people within a given organization to have a need
     to share secrets with one another.	 jass lets you do this through the use
     of SSH keys, as those are frequently already well distributed and trusted
     in many places.

     In particular, jass will convert the given public key into PKCS8 format,
     allowing it to be used with openssl(1)'s rsautl(1) utility.  Since asym-
     metric encryption is only suitable for inputs smaller than the keysize,
     jass will then generate a 256 bit session key.  This session key is
     encrypted using the user's public key, while the data itself is encrypted
     using AES-256-CBC mode with said session key.

     As an alternative to providing a public key, a recipient may also be
     specified via the -u flag.	 In that case, jass will first look for that
     user's ~/.ssh/authorized_keys file, then the file /etc/ssh/autho-
     rized_keys/<user>, and finally, if neither of these is readable, it will
     look for the field specified by the LDAPFIELD variable for the given
     username in LDAP.

     The output from jass consists of several uuencode(1)ed files.  The first
     is the encrypted message, the following files are the session key encrypted
     for each of the public keys.  jass will properly extract, decode and use
     these when the -d flag is specified, though it should be noted that the
     decrypted session key briefly lives on the disk in a temporary directory.

EXAMPLES
     To generate a secret message encrypted with the file 'bobs_pubkey' and
     store it in the file 'secret':

	   echo "The ostrich has left the savannah." | \
		   jass -e -k bobs_pubkey > secret

     To send a secret message to 'jschauma':

	   echo "The lion sleeps." | jass -u jschauma |	 \
		   mail -s "Nothing to see here" jschauma

     To decrypt a secret message generated by jass using the private ssh key
     found in 'my_privkey':

	   jass -d -k my_privkey < secret

     To encrypt the file service.yml for the user 'jschauma':

	   jass -u jschauma -f service.yml >service.yml.enc

     This command differs from the previous examples in that the name of the
     input file is encoded in the output, allowing the recipient to restore
     the file directly:

	   $ jass -d -k ~/.ssh/id_rsa -f service.yml.enc
	   Enter pass phrase for /home/jschauma/.ssh/id_rsa:
	   $ ls
	   service.yml
	   $

     To encrypt data for multiple recipients (as well as for all keys found
     for each recipient):

	     jass -u user1 -u user2 -u user3 <data

ENVIRONMENT
     When attempting to query LDAP for public keys, jass will require the
     variables LDAFIELD and LDAPSEARCH to be set.  You can either edit the
     script and set them in there, or export them in your environment.

     The following are example values.

     LDAPFIELD	  SSHPubkey

     LDAPSEARCH	  ldapsearch -LLLxh ldap.yourdomain.com -b dc=example,dc=com

SEE ALSO
     openssl(1), ssh-keygen(1)

BUGS
     jass will only allow RSA keys.

     jass assumes the public SSH key to be in OpenSSH's default format; if the
     public key is in another format, it may break.

     jass will not accept private SSH keys in PEM format when decrypting.

     When encrypting, you cannot combine specific files given via the -k flag
     with recipients specified via the -u flag, even though you can use a sin-
     gle file containing multiple keys or specify multiple recipients.

HISTORY
     jass was originally written by Jan Schaumann <jschauma@netmeister.org> in
     April 2013.

NetBSD 5.0			April 22, 2013			    NetBSD 5.0
